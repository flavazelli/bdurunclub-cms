#!/bin/bash
set -e

# Variables from Terraform interpolation
DISK_DEVICE="/dev/sdb"
MOUNT_PATH="/mnt/mongo-data"
MONGO_PASSWORD="${mongo_password}"
GCS_BUCKET="${gcs_bucket}"
GRAFANA_PASSWORD="${grafana_password}"

# Format disk only if it isn't formatted
if ! blkid $DISK_DEVICE; then
  echo "Formatting and mounting persistent disk..."
  mkfs.ext4 -F $DISK_DEVICE
fi

mkdir -p $MOUNT_PATH
mount $DISK_DEVICE $MOUNT_PATH

# Ensure persistent mount
if ! grep -qs "$MOUNT_PATH" /etc/fstab; then
  echo "$DISK_DEVICE $MOUNT_PATH ext4 defaults 0 0" >> /etc/fstab
fi

# Install Docker
echo "Installing Docker..."
apt-get update
apt-get install -y docker.io curl jq
systemctl enable docker
systemctl start docker

# Create Docker network
docker network create monitoring

# Create MongoDB data dir
mkdir -p $MOUNT_PATH/mongo
mkdir -p /var/backups/mongo
chown 999:999 $MOUNT_PATH/mongo

# Run MongoDB container
echo "Running MongoDB..."
docker run -d \
  --name mongo \
  --network monitoring \
  -v $MOUNT_PATH/mongo:/data/db \
  -v /var/backups/mongo:/backup \
  -p 27017:27017 \
  -e MONGO_INITDB_ROOT_USERNAME=root \
  -e MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD \
  mongo:7

# Prometheus config
mkdir -p /opt/prometheus
cat <<EOF > /opt/prometheus/prometheus.yml
global:
  scrape_interval: 15s
scrape_configs:
  - job_name: 'mongodb'
    static_configs:
      - targets: ['mongo-exporter:9216']
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
EOF

# Run MongoDB Exporter
docker run -d \
  --name mongo-exporter \
  --network monitoring \
  -p 9216:9216 \
   bitnami/mongodb-exporter:latest \
  --mongodb.uri="mongodb://root:$MONGO_PASSWORD@mongo:27017/admin?authSource=admin"

# Run Node Exporter (disk monitoring)
docker run -d \
  --name node-exporter \
  --network monitoring \
  -p 9100:9100 \
  prom/node-exporter

# Run Prometheus
docker run -d \
  --name prometheus \
  --network monitoring \
  -p 9090:9090 \
  -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
  prom/prometheus

# Setup Grafana provisioning
mkdir -p /opt/grafana/provisioning/{dashboards,datasources}

# Datasource provisioning
cat <<EOF > /opt/grafana/provisioning/datasources/prometheus.yml
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
EOF

# Dashboard provisioning
cat <<EOF > /opt/grafana/provisioning/dashboards/dashboards.yml
apiVersion: 1
providers:
  - name: 'Default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    editable: true
    options:
      path: /var/lib/grafana/dashboards
EOF

# Create dashboards directory
mkdir -p /opt/grafana/dashboards

# MongoDB Monitoring Dashboard (simplified example)
cat <<EOF > /opt/grafana/dashboards/mongodb_dashboard.json
{
  "annotations": {"list":[]},
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1622472315923,
  "panels": [
    {
      "datasource": "Prometheus",
      "title": "MongoDB Connections",
      "type": "graph",
      "targets": [
        {
          "expr": "mongodb_connections{instance=~\".*\"}",
          "legendFormat": "{{instance}}",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0}
    }
  ],
  "schemaVersion": 26,
  "title": "MongoDB Monitoring",
  "version": 1
}
EOF

# Disk Usage Dashboard (simplified example)
cat <<EOF > /opt/grafana/dashboards/disk_dashboard.json
{
  "annotations": {"list":[]},
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1622472315924,
  "panels": [
    {
      "datasource": "Prometheus",
      "title": "Disk Space Used (%)",
      "type": "gauge",
      "targets": [
        {
          "expr": "(node_filesystem_size_bytes{mountpoint=\"$MOUNT_PATH\"} - node_filesystem_free_bytes{mountpoint=\"$MOUNT_PATH\"}) / node_filesystem_size_bytes{mountpoint=\"$MOUNT_PATH\"} * 100",
          "refId": "A"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "green", "value": null},
              {"color": "orange", "value": 70},
              {"color": "red", "value": 90}
            ]
          }
        }
      },
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
    }
  ],
  "schemaVersion": 26,
  "title": "Disk Usage Overview",
  "version": 1
}
EOF

# Run Grafana
docker volume create grafana-storage
docker run -d \
  --name=grafana \
  --network monitoring \
  -p 3000:3000 \
  -e "GF_SECURITY_ADMIN_USER=admin" \
  -e "GF_SECURITY_ADMIN_PASSWORD=$GRAFANA_PASSWORD" \
  -v grafana-storage:/var/lib/grafana \
  -v /opt/grafana/provisioning:/etc/grafana/provisioning \
  -v /opt/grafana/dashboards:/var/lib/grafana/dashboards \
  grafana/grafana

# Wait for dashboards to be imported
echo "Waiting for Grafana to load dashboards..."
sleep 20

# Google Cloud SDK (for GCS backups)
echo "Installing Google Cloud SDK..."
apt-get install -y apt-transport-https ca-certificates gnupg curl
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee /etc/apt/sources.list.d/google-cloud-sdk.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
apt-get update && apt-get install -y google-cloud-sdk

# Backup script
echo "Setting up MongoDB backup cron job..."
cat <<EOF > /usr/local/bin/mongo_backup.sh
#!/bin/bash
BACKUP_FILE="mongo_backup_\$(date +%F_%T).gz"
BACKUP_PATH="/backup/\$BACKUP_FILE"
echo "Running MongoDB backup..."
docker exec mongo mongodump --archive=\$BACKUP_PATH --gzip --username root --password $MONGO_PASSWORD --authenticationDatabase admin
if [ \$? -ne 0 ]; then echo "❌ mongodump failed!"; exit 1; fi
echo "Uploading backup to GCS..."
gsutil cp /var/backups/mongo/\$BACKUP_FILE gs://$GCS_BUCKET/\$BACKUP_FILE
echo "Cleaning up local backup..."
rm /var/backups/mongo/\$BACKUP_FILE
EOF

chmod +x /usr/local/bin/mongo_backup.sh
(crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/mongo_backup.sh") | crontab -
